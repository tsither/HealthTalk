--CREATE DATABASE medical_assistant;

DROP SCHEMA medical_assistant CASCADE;

CREATE SCHEMA medical_assistant;

--- in general for all columns with string values text data type is chosen, for number values int type is chosen
--- for each table surrogate key is generated by GENERATED ALWAYS AS IDENTITY and PK constraint is added


CREATE TABLE IF NOT EXISTS medical_assistant.report_type (
	report_type_id 	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	report_type_name 	VARCHAR(50) NOT NULL);

CREATE TABLE IF NOT EXISTS medical_assistant.doctor_specialization (
	specialization_id 		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	specialization_name 	VARCHAR(50) NOT NULL);

CREATE TABLE IF NOT EXISTS medical_assistant.user (
	user_id 		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	first_name		VARCHAR (50) NOT NULL,
	last_name		VARCHAR (50) NOT NULL,
	birth_date 		DATE NOT NULL,
	phone_number 	VARCHAR (10) NOT NULL);


CREATE TABLE IF NOT EXISTS medical_assistant.hospitals (
	hospital_id 	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	hospital_name	VARCHAR (50) NOT NULL,
	address_line 	VARCHAR (50) NOT NULL, 
	phone_number 	VARCHAR (10) NOT NULL);

CREATE TABLE IF NOT EXISTS medical_assistant.medicine (
	medicine_id 		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	medicine_name 		VARCHAR(50) NOT NULL,
	dosage 				INT NOT NULL,
	times 				INT NOT NULL);

CREATE TABLE IF NOT EXISTS medical_assistant.diagnosis (
	diagnosis_id 	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	diagnosis_name	VARCHAR (50) NOT NULL,
	recommendations	VARCHAR (100) NOT NULL);
	
CREATE TABLE IF NOT EXISTS medical_assistant.reports (
	report_id 				INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	report_date				DATE NOT NULL,
	test_name				VARCHAR (50) NOT NULL,
	test_result				NUMERIC (12,2) NOT NULL,	
	test_units				VARCHAR (10) NOT NULL,
	test_reference_range	VARCHAR (20) NOT NULL,
	report_type_id 			INT NOT NULL REFERENCES medical_assistant.report_type (report_type_id ) ON UPDATE CASCADE,
	user_id 				INT NOT NULL REFERENCES medical_assistant.user (user_id ) ON UPDATE CASCADE,
	hospital_id				INT NOT NULL REFERENCES medical_assistant.hospitals (hospital_id) ON UPDATE CASCADE,
	interpretation			TEXT NULL);

CREATE TABLE IF NOT EXISTS medical_assistant.doctors (
	doctor_id 			INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	first_name			VARCHAR (50) NOT NULL,
	last_name			VARCHAR (50) NOT NULL,
	phone_number 		VARCHAR (10) NOT NULL,
	email				VARCHAR (50) NOT NULL,
	hospital_id			INT NOT NULL REFERENCES medical_assistant.hospitals (hospital_id) ON UPDATE CASCADE,
	specialization_id	INT NOT NULL REFERENCES medical_assistant.doctor_specialization (specialization_id) ON UPDATE CASCADE);

CREATE TABLE IF NOT EXISTS medical_assistant.appointments (
	appointment_id 		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	appointment_date	DATE NOT NULL,
	payment_total		NUMERIC (12,2) NOT NULL,
	user_id				INT NOT NULL REFERENCES medical_assistant.user (user_id) ON UPDATE CASCADE,
	hospital_id			INT NOT NULL REFERENCES medical_assistant.hospitals (hospital_id) ON UPDATE CASCADE,
	doctor_id			INT NOT NULL REFERENCES medical_assistant.doctors (doctor_id) ON UPDATE CASCADE);

CREATE TABLE IF NOT EXISTS	medical_assistant.diagnosis_by_doctor (		
  	doctor_id		INT NOT NULL REFERENCES medical_assistant.doctors (doctor_id) ON UPDATE CASCADE,
  	diagnosis_id	INT NOT NULL REFERENCES medical_assistant.diagnosis (diagnosis_id) ON UPDATE CASCADE);

 CREATE TABLE IF NOT EXISTS	medical_assistant.medicine_by_diagnosis (		
  	medicine_id		INT NOT NULL REFERENCES medical_assistant.medicine (medicine_id) ON UPDATE CASCADE,
  	diagnosis_id	INT NOT NULL REFERENCES medical_assistant.diagnosis (diagnosis_id) ON UPDATE CASCADE);
  

------Create all table relationships with primary and foreign keys.
 
-- FK created while the DB was being created;
  
-- ADD PK TO bridge TABLES FOR the combitation OF ids TO be unique

ALTER TABLE medical_assistant.diagnosis_by_doctor ADD PRIMARY KEY (doctor_id, diagnosis_id);	

ALTER TABLE medical_assistant.medicine_by_diagnosis ADD PRIMARY KEY (medicine_id, diagnosis_id);	 


-- indexes for FK created, except for those tables where PK constraint is added to them

CREATE INDEX IF NOT EXISTS report_type_id_idx ON medical_assistant.reports (report_type_id);

CREATE INDEX IF NOT EXISTS user_id_idx ON medical_assistant.reports (user_id);

CREATE INDEX IF NOT EXISTS hospital_id_idx ON medical_assistant.reports (hospital_id);

CREATE INDEX IF NOT EXISTS hospital_id_idx ON medical_assistant.doctors (hospital_id);

CREATE INDEX IF NOT EXISTS specialization_id_idx ON medical_assistant.doctors (specialization_id);

CREATE INDEX IF NOT EXISTS user_id_idx ON medical_assistant.appointments (user_id);

CREATE INDEX IF NOT EXISTS hospital_id_idx ON medical_assistant.appointments (hospital_id);

CREATE INDEX IF NOT EXISTS doctor_id_idx ON medical_assistant.appointments (doctor_id);

-- alter reports table to add case into interpretation column, so that it is autofilled with values "High", "Low", "Normal"

ALTER TABLE reports DROP COLUMN interpretation;

ALTER TABLE reports
ADD interpretation VARCHAR(10) GENERATED ALWAYS AS (
    CASE
        WHEN test_result >= CAST(substring(test_reference_range FROM '^[0-9]+(\.[0-9]+)?') AS NUMERIC (12,2)) AND
             test_result <= CAST(substring(test_reference_range FROM '-([0-9]+(\.[0-9]+)?)$') AS NUMERIC (12,2)) THEN 'Normal'
        WHEN test_result < CAST(substring(test_reference_range FROM '^[0-9]+(\.[0-9]+)?') AS NUMERIC (12,2)) THEN 'Low'
        WHEN test_result > CAST(substring(test_reference_range FROM '-([0-9]+(\.[0-9]+)?)$') AS NUMERIC (12,2)) THEN 'High'
    END
) STORED;

------Create some check constraints

ALTER TABLE medical_assistant.user  		--- CONSTRAINT TO CHECK whether age OF a person IS NOT MORE than around 120 years
ADD CHECK (birth_date > '1900-01-01');

ALTER TABLE medical_assistant.user 
ADD CHECK (phone_number ~ ('^[0-9]*$'));	-- phone number should contain ONLY numbers AS a string value

ALTER TABLE medical_assistant.doctors 
ADD CHECK (phone_number ~ ('^[0-9]*$'));

ALTER TABLE medical_assistant.hospitals 
ADD CHECK (phone_number ~ ('^[0-9]*$'));


-------Fill tables with sample data		

--the hardcode is avoided by using subquiries mainly, insert into is used to insert values  
 
--for bulk inserts need to use CTE to avoid dublicates, for one inserted values can use direcly where not exists


WITH cte_report_type (report_type_name) as 
		(VALUES ('Blood report'),
				('Urinalysis'))
INSERT INTO medical_assistant.report_type (report_type_name)
SELECT report_type_name
FROM cte_report_type
WHERE NOT EXISTS (
   SELECT 1
   FROM medical_assistant.report_type
   WHERE report_type_name = cte_report_type.report_type_name)
RETURNING report_type_id;


WITH cte_doctor_specialization (specialization_name) as 
		(VALUES ('Therapist'),
				('Ð¡ardiologist'))
INSERT INTO medical_assistant.doctor_specialization (specialization_name)
SELECT specialization_name
FROM cte_doctor_specialization
WHERE NOT EXISTS (
   SELECT 1
   FROM medical_assistant.doctor_specialization
   WHERE specialization_name = cte_doctor_specialization.specialization_name)
RETURNING specialization_id;


WITH cte_medicine (medicine_name,
					dosage,
					times) AS 
( VALUES ('Aspirin', 
 		500, 
 		1),
		('Paracetamol', 
		500, 
		2)
		)			
INSERT INTO medical_assistant.medicine (medicine_name,
										dosage,
										times)
SELECT  medicine_name,
		dosage,
		times
FROM cte_medicine
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.medicine
   WHERE medicine_name = cte_medicine.medicine_name
   		AND dosage = cte_medicine.dosage
   		AND times = cte_medicine.times)
RETURNING medicine_id;	


WITH cte_diagnosis (diagnosis_name,
					recommendations) AS 
( VALUES ('Cold', 
 		'Take Paracetamol'),
		('Gastritis', 
		'Take ibuprofen')
		)			
INSERT INTO medical_assistant.diagnosis (diagnosis_name,
										recommendations)
SELECT  diagnosis_name,
		recommendations
FROM cte_diagnosis
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.diagnosis
   WHERE diagnosis_name = cte_diagnosis.diagnosis_name
   		AND recommendations = cte_diagnosis.recommendations)
RETURNING diagnosis_id;	


WITH cte_user (first_name,
				last_name,
				phone_number,
				birth_date) AS 
( VALUES ('Belen', 
 		'T',
 		'56892487',
 		'1990-12-01'::date)
		)			
INSERT INTO medical_assistant.user (first_name,
									last_name,
									phone_number,
									birth_date)
SELECT  first_name,
		last_name,
		phone_number,
		birth_date
FROM cte_user
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.user
   WHERE first_name = cte_user.first_name
   		AND last_name = cte_user.last_name
   		AND phone_number = cte_user.phone_number 
   		AND birth_date = cte_user.birth_date)
RETURNING user_id;	


WITH cte_hospitals (hospital_name,
					address_line,
					phone_number) AS 
( VALUES ('1st hospital', 
 		'LA',
 		'8457289'),
 		('2d hospital',
 		'NY',
 		'8447239')
		)			
INSERT INTO medical_assistant.hospitals (hospital_name,
										address_line,
										phone_number)
SELECT  hospital_name,
		address_line,
		phone_number
FROM cte_hospitals
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.hospitals
   WHERE hospital_name = cte_hospitals.hospital_name
   		AND address_line = cte_hospitals.address_line
   		AND phone_number = cte_hospitals.phone_number)
RETURNING hospital_id;	


WITH cte_reports (user_id,
				report_date,
				test_name,
				test_result,	
				test_units,
				test_reference_range,
				report_type_id,
				hospital_id) AS 
( VALUES ((SELECT user_id FROM "user"
			WHERE first_name = 'Belen'), 
 		'2024-04-01'::date,
 		'Hemoglobin',
 		19.0,
 		'g/dL',
 		'13.0-17.0',
 		(SELECT report_type_id FROM report_type
			WHERE report_type_name = 'Blood report'),
		(SELECT hospital_id FROM hospitals 
			WHERE hospital_name = '1st hospital')
			),
		((SELECT user_id FROM "user"
			WHERE first_name = 'Belen'), 
 		'2024-04-01'::date,
 		'Heutrophils',
 		60,
 		'%',
 		'50-62',
 		(SELECT report_type_id FROM report_type
			WHERE report_type_name = 'Blood report'),
		(SELECT hospital_id FROM hospitals 
			WHERE hospital_name = '1st hospital'))
		)			
INSERT INTO medical_assistant.reports (user_id,
									report_date,
									test_name,
									test_result,	
									test_units,
									test_reference_range,
									report_type_id,
									hospital_id)
SELECT  user_id,
		report_date,
		test_name,
		test_result,	
		test_units,
		test_reference_range,
		report_type_id,
		hospital_id
FROM cte_reports
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.reports
   WHERE user_id = cte_reports.user_id
   		AND report_date = cte_reports.report_date
   		AND test_name = cte_reports.test_name 
   		AND test_result = cte_reports.test_result
   		AND test_units = cte_reports.test_units
   		AND test_reference_range = cte_reports.test_reference_range
   		AND report_type_id = cte_reports.report_type_id
   		AND hospital_id = cte_reports.hospital_id)
RETURNING report_id;


WITH cte_doctors (first_name, 
					last_name,
					phone_number,
					email,
					hospital_id,
					specialization_id) AS 
( VALUES ('John',
			'Doe',
 		'8374972',
 		'johndoe@gmail.com',
		(SELECT hospital_id FROM hospitals 
			WHERE hospital_name = '1st hospital'),
		(SELECT specialization_id FROM doctor_specialization 
			WHERE specialization_name = 'Therapist')),
 		('Jane',
		'Doe',
 		'8888888',
 		'janedoe@gmail.com',
		(SELECT hospital_id FROM hospitals 
			WHERE hospital_name = '2d hospital'),
		(SELECT specialization_id FROM doctor_specialization 
			WHERE specialization_name = 'Therapist'))
		)			
INSERT INTO medical_assistant.doctors (first_name,
										last_name,
										phone_number,
										email,
										hospital_id,
										specialization_id)
SELECT  first_name,
		last_name,
		phone_number,
		email,
		hospital_id,
		specialization_id
FROM cte_doctors
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.doctors
   WHERE first_name = cte_doctors.first_name
   		AND last_name = cte_doctors.last_name
   		AND phone_number = cte_doctors.phone_number
   		AND email = cte_doctors.email
   		AND hospital_id = cte_doctors.hospital_id
   		AND specialization_id = cte_doctors.specialization_id)
RETURNING doctor_id;	


WITH cte_appointments (user_id,
						appointment_date,
						payment_total,
						doctor_id,
						hospital_id) AS 
( VALUES ((SELECT user_id FROM "user" u
			WHERE first_name = 'Belen'), 
 		'2024-04-22'::date,
 		60,
 		(SELECT doctor_id FROM doctors  
			WHERE first_name = 'John'),
		(SELECT hospital_id FROM hospitals 
			WHERE hospital_name = '1st hospital')),
 		((SELECT user_id FROM "user" u
			WHERE first_name = 'Belen'),
		'2024-04-30'::date,
 		60,
 		(SELECT doctor_id FROM doctors  
			WHERE first_name = 'John'),
		(SELECT hospital_id FROM hospitals 
			WHERE hospital_name = '1st hospital'))
		)			
INSERT INTO medical_assistant.appointments (user_id,
											appointment_date,
											payment_total,
											doctor_id,
											hospital_id)
SELECT  user_id,
		appointment_date,
		payment_total,
		doctor_id,
		hospital_id
FROM cte_appointments
WHERE NOT EXISTS (
   SELECT 1
   FROM  medical_assistant.appointments
   WHERE user_id = cte_appointments.user_id
   		AND appointment_date = cte_appointments.appointment_date
   		AND payment_total = cte_appointments.payment_total
   		AND doctor_id = cte_appointments.doctor_id
   		AND hospital_id = cte_appointments.hospital_id)
RETURNING appointment_id;	


--Queries examples

-- When the user had appointments in the 1st hospital?
SELECT appointment_date, first_name||' '|| last_name AS "User"
FROM appointments a
JOIN "user" u ON a.user_id =u.user_id 
WHERE a.hospital_id = (SELECT hospital_id FROM hospitals h WHERE hospital_name = '1st hospital');

--What is stored in the table "Reports"?
SELECT * FROM reports r;

--When the user's hemoglobin was high? 
SELECT report_type_name, report_date, test_name, test_result, test_reference_range, interpretation
FROM reports r 
JOIN report_type rt ON r.report_type_id =rt.report_type_id 
WHERE test_name = 'Hemoglobin' AND interpretation = 'High';
